#%RAML 0.8
title: MobilityBee base
version: v1
baseUri: http://api.example.com/{version}

resourceTypes:
  - collection:
      usage: This resourceType should be used for any collection of items. Collection items is SAME as single resource.
      description: |
        The collection of <<resourcePathName>>.
      is: [ limited ]
      get:
        description: Get all <<resourcePathName>>.
        queryParameters:
          ids:
            type: string
            description: Array of <<resourcePathName>> id separated by commas.

traits:
  - localized:
      headers:
        Accept-Language:
          description: |
            Acceptable language for response.
          example: en-US
  - secured_by_user_session:
      responses:
        403:
          description: |
            Valid user session is required. Login to get access.
  - limited:
      queryParameters:
        limit:
          type: integer
          description: |
            Limits how much items will be returned. If limit is not provided all <<resourcePathName>> items will be returned. Items count returned by request not guaranteed to be equal limit. Returned items count can be in range `[0, limit]', which means that minimaly you can get 0 items and maximaly you can get items count equal to limit.
            
            Limit equal to 0, means unlimited.
        offset:
          type: integer
          description: |
            You will get collection items from `(offset, MIN(offset+limit, n)]`. The initial offet is 0. Range start is exclusive, but end is inclusive, which means that for example for ofset=2 (offet 2 items from start), you will get items 3,4,.., etc. If `offset >= n`, items count in response will be 0, but HTTP status code will be `200`.
  - paged:
      description: |
        Paged endpoint main use is when you can't use limit/offset idiom, because your data is not a collection of objects, but you want to separate response into chunks, because all set is too large to be returned at once. 
        Other thing why paged endpoint is difference from collection is that every page is self contained, which means that if you have page=1 you can't neceraly make prediction on page=2 and vise versa.For example, in page=1 you return 4 categories and 10 products, in page=2 you can return same 4 categories and other 33 products and 2 banners.
        You should look at pages as separate units, which are linked by endpoint logic. This allows you to separate enpoint data set into custom chunks where each can be custom constructed. For example, you have endpoint which contains 100 products, 20 categories and 10 banners, return all this set at once can be slow because it contains a lot of data so you separated it into pages and you wanted that in every page all banners will be visible because they are importart to you. So you created 3 pages as folows: page=1 10 banners, 5 categories, 50 products; page=2 10 banners, other 5 categories, other 30 products; page=3 10 banners, other 20 products.
        Only indication that you have next page or previuos page is `next` and `previous` links in links array. So if you have endpoint which have only one page `next` link should be not present and if you have multiple pages only last page should not include `next` link only `previuos`.
      queryParameters:
        page:
          type: integer
          description: |
            Defines specific page for results. If you don't provide `page` you will get first page of the response. Default is 1.
  - searchable:
      queryParameters:
        searchQuery:
          type: string
  - orderable:
      queryParameters:
        orderBy:
          enum: [ titleAsc, titleDesc, priceAsc, priceDesc, discountAsc, discountDesc ]
  - tree:
      queryParameters:
        depth:
          type: integer
          default: 0
          description: |
            Indicates how deep <<resourcePathName>> tree can be. 
            
            Example 1. `depth = 0` means that <<resourcePathName>> in sub <<resourcePathName>> array wont return sub <<resourcePathName>>. 
            
            Example 2. `depth = 1` means that <<resourcePathName>> in sub <<resourcePathName>> array will return sub <<resourcePathName>> if they exist, but those sub categories, wont return sub sub <<resourcePathName>>.

/_api/rules:
  /messages :
    is: [ localized ]
    description: |
      **Example of generic messages that could be return by all requests in any of response code.**
      
      If request fails with an error error messages should be present.
      
      If request have aditional information for user it can be added to info messages.
      
      If you want to for example congradulate user after registration you can provide success messages.
    get:
      responses:
        200:
          body:
            application/json:
              schema: !include schema_messages.json
              example: !include example_messages.json
    post:
      responses:
        200:
          body:
            application/json:
              schema: !include schema_messages.json
              example: !include example_messages.json
  /date:
    description: |
      **Date/Time format ISO 8601, UTC**. This date and time format is required everywhere where you want to return date/time data in response json.
  /authentication:
    description: |
      _Rules_
      
      For a client to be able to consume this API, it must provide authentication details within each request. Authentication details are provided using a HTTP Authorization header [RFC2616 Section 14.8](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.8).
      
      Authorization header's field value consists of `MobilityBee` auth-scheme identifier, API provider issued API Key and SHA256 hash of request's relative URI with absolute path, API Key and API Secret. In full form, Authorization header field has a form as follows:
      
      `Authorization: MobilityBee apikey="APIKEY", hash="HASH"`
      
      where `HASH` is 'hex' encoded and calculated like this:
      
      `HASH = hex_encode(SHA256(URI + APIKEY + APISECRET))`
      
      where `URI` is a relative request URI with absolute path (e.g. `/categories`, `/products/12345`). Be advised that _query string_ is **NOT** included.
        
      If invalid or none Authentication details are provided within a request, server must respond with `401 Unauthorized` response. The response **must** also include a `WWW-Authenticate` header with a field value of 'MobilityBee', i.e. `WWW-Authenticate: MobilityBee`.
        
      _Examples_
      
      When API Key is _foofoo_, API Secret is _applesandoranges_ and to-be-consumed resource URI is _http://api.example.com/categories/12345_, Authorization field should look like this:
      
      `Authorization: MobilityBee apikey="foofoo", hash="5e82e3836f234a8f8bcacc711fabdac3216663bb6d38b0ea7e2e76482f196149"`
      
      Using MAC OS X shell, corresponding hash can be calculated with a following command:
      
      `echo -n '/categories/12345foofooapplesandoranges' | shasum -a 256`
      
      In Node.JS, calculation is done as follows:
      
      `var hash = require('crypto').createHash('sha256').update('/categories/12345foofooapplesandoranges').digest('hex');`

/user:
  is: [ localized, secured_by_user_session ]
  get:
    responses:
      200:
        body:
          application/json:
            schema: !include schema_user.json
            example: !include example_user.json
  post: # equal to patch
    description: Updates user information.
    body:
      application/json:
        schema: !include schema_user.json
        example: |
          {
            "user": {
              "name": "jonas",
              "phone": "+37012345678"
            }
          }
    responses:
      200:
        body:
          application/json:
            schema: !include schema_user.json
            example: |
              {
                "user": {
                  "id": "0000",
                  "email": "foo@example.com",
                  "name": "jonas",
                  "phone": "+37012345678"
                }
              }
  /signin:
    is: [ localized ]
    post:
      body:
        application/json:
          schema: !include schema_user.json
          example: |
            {
              "user": {
                "email": "foo@example.com",
                "password": "example password"
              }
            }
      responses:
        200:
          body:
            application/json:
              schema: !include schema_user.json
              example: !include example_user.json
  /signup:
    is: [ localized ]
    post:
      body:
        application/json:
          schema: !include schema_user.json
          example: |
            {
              "user": {
                "email": "foo@example.com",
                "password": "example password",
                "name": "jonas"
              }
            }
      responses:
        201:
          body:
            application/json:
              schema: !include schema_user.json
              example: !include example_user.json
  /remind:
    is: [ localized ]
    post:
      body:
        application/json:
          schema: !include schema_user.json
          example: |
            {
              "user": {
                "email": "foo@example.com"
              }
            }
      responses:
        200:
  /orders:
    type: collection
    is: [ localized, secured_by_user_session ]
    get:
      responses:
        200:
          body:
            application/json:
              schema: !include schema_collection.json
              example: !include example_orders.json
    /{orderId}:
      is: [ localized, secured_by_user_session ]
      get:
        responses:
          200:
            body:
              application/json:
                schema: !include schema_order.json
                example: !include example_order.json
      /payments:
        is: [ localized, secured_by_user_session ]
        get:
          description: |
            Payments are options objects, which means that they can be returned in `cart/slices/{sliceId}/options?branchId=payments`, only diference is that in this endpoint payments are under `payments` key and in slice options they ar under `options` key.
          responses:
            200:
              body:
                application/json:
                  schema: !include schema_payments_GET.json
                  example: !include example_payments_GET.json
        post:
          description: |
            Payments are sent to server as options, only diference is that root key is not `options`, but `payments`.
          body:
            application/json:
              schema: !include schema_payments_POST.json
              example: !include example_payments_POST.json
          responses:
            200:
              body:
                application/json:
                  schema: !include schema_payment.json
                  example: !include example_payment.json
  /addresses:
    type: collection
    is: [ localized, secured_by_user_session ]
    get:
      responses:
        200:
          body:
            application/json:
              schema: !include schema_collection.json
              example: !include example_addresses.json
    post:
      body:
        application/json:
          schema: !include schema_address.json
          example: !include example_address_POST.json
      responses:
        201:
          headers:
            Content-Location:
              description: |
                Location of newly created address.
              example: |
                Content-Location: /addresses/00001
          body:
            application/json:
              schema: !include schema_address.json
              example: !include example_address.json
    /{addressId}:
      is: [ localized, secured_by_user_session ]
      get:
        responses:
          200:
            body:
              application/json:
                schema: !include schema_address.json
                example: !include example_address.json
      post: # equal to patch
        description: |
          Prameters same as `user/addresses` `POST` method, difference is that this method only updates address.
        body:
          application/json:
            schema: !include schema_address.json
            example: !include example_address_POST.json
        responses:
          200:
            body:
              application/json:
                schema: !include schema_address.json
                example: !include example_address.json

/products:
  type: collection
  is: [ localized, orderable ]
  get:
    description: |
      You can get products for specific category, search query and optionaly filtered. All query parameter is inclusive, which means that you can query products for example in specific category with search string and aditionaly filtered.
    queryParameters:
      collectionId:
        type: string
        description: |
          Describes some logical set of products grouped into collection described by `collectionId`. For example you want to group this week top selling products, so you group them into collection, which have id.
      categoryIds:
        type: string
        description: |
          Array of categories id separated by commas.
      filters[{filterId}][]:
        type: string
        description: |
          Filters are sent as array. For example, `filters[priceRange][]=100-200&filters[vendor][]=vendor1&filters[vendor][]=vendor2`.
          http://www.nwa4.com/blog/html-and-php-multiple-checkboxes-form-handling-using-arrays
    responses:
      200:
        body:
          application/json:
            schema: !include schema_collection.json
            example: !include example_products.json
  /filters:
    is: [ localized ]
    get:
      description: |
        You can alter returned filters by providing `categoryIds` parameter, because some filters may be present only for specific category. Filters are also included in `/products` response, see `/products` response schema for details.
      queryParameters:
        categoryIds:
          type: string
          description: |
            Array of categories id separated by commas.
      responses:
        200:
          body:
            application/json:
              schema: !include schema_filters.json
              example: !include example_filters.json
  /{productId}: # TODO Related, similar, alternative
    is: [ localized ]
    description: Returns product full information.
    get:
      responses:
        200:
          body:
            application/json:
              schema: !include schema_product.json
              example: !include example_product.json
    /description:
      is: [ localized ]
      description: Returns product description in html.
      get:
        responses:
          200:
            body:
              application/json:
                schema: !include schema_product_description.json
                example: !include example_product_description.json

/promo:
  is: [ localized ]
  description: |
    Default landing page.
  get:
    responses:
      200:
        body:
          application/json:
            schema: !include schema_promo.json
            example: !include example_promo.json
  /{promoId}:
    is: [ localized ]
    description: |
      Custom landing page for example accessible via banner.
    get:
      responses:
        200:
          body:
            application/json:
              schema: !include schema_promo.json
              example: !include example_promo.json

/categories:
  type: collection
  is: [ localized ]
  get:
    queryParameters:
      parentCategoryId:
        description: |
          If you do not provide `parentCategoryId` you will get root categories.
    responses:
      200:
        body:
          application/json:
            schema: !include schema_collection.json
            example: !include example_categories.json

/search:
  is: [ localized, searchable, paged]
  get:
    description: Searches any kind of stuff in resources.
    responses:
      200:
        body:
          application/json:
            schema: !include schema_search.json
            example: !include example_search.json
  /suggestions:
    is: [ localized, searchable]
    get:
      description: Autocomplete suggesions
      responses:
        200:
          body:
            application/json:
              schema: !include schema_search_suggestions.json
              example: !include example_search_suggestions.json

/info:
  /pages:
    is: [ localized, tree ]
    get:
      queryParameters:
        parentPageId:
      responses:
        200:
          body:
            application/json:
              schema: !include schema_info_pages.json
              example: !include example_info_pages.json
    /{pageId}:
      is: [ localized ]
      get:
        responses:
          200:
            body:
              application/json:
                schema: !include schema_info_page_content.json
                example: !include example_info_page_content.json

# https://docs.google.com/document/d/1kEu4oD29Z9XjXHu8NABQJ_D8VybI12bFO6z9DgTky4g/edit?usp=sharing
/cart:
  is: [ localized ]
  get:
    responses:
      200:
        body:
          application/json:
            schema: !include schema_cart.json
            example: !include example_cart.json
  post:
    description: |
      Via `POST` method you can `add`, `update` and `remove` products for cart.
    body:
      application/json:
        schema: !include schema_cart_product_POST.json
        example: !include example_cart_product_POST.json
    responses:
      200:
        body:
          application/json:
            schema: !include schema_cart.json
            example: !include example_cart.json
  /submit:
    is: [ localized ]
    post:
      description: |
        Automaticaly submits all slices. If at least one slice submit fails all slices are rollbacked to not submited state! This means that automatic slice submit initialized by cart submit do NOT support only some submited slices and requires all slices submit to succeed. If submit is successful in response you will get all created orders, similary as `user/orders` via GET.
      responses:
        201:
          body:
            application/json:
              schema: !include schema_collection.json
              example: !include example_cart_submit.json
  /slices:
    /{sliceId}:
      /options:
        is: [ localized ]
        description: |
          Prefered options for individual slice select flow is in steps as folow. 
          
          **Step 1.** Request slice options via `GET` without `branchId`, you will get default branch with its `options` and navigation `links`. 
          
          **Step 2.** You select options you prefer and create `json` file containing your selected options in `options`. Then you `POST` it to `self` link in `links` array. In response you will get `json` containing next step information. 
          
          **Step 3.** If `json` response do not have `options` it means that you reached end of options select and you may go to step 4. Ohterwise you go to step 2. 
          
          **Step 4.** Submit cart.
        get:
          queryParameters:
            branchId:
          responses:
            200:
              body:
                application/json:
                  schema: !include schema_cart_slice_options_GET.json
                  example: !include example_cart_slice_options_GET.json
        post:
          body:
            application/json:
              schema: !include schema_cart_slice_options_POST.json
              example: !include example_cart_slice_options_POST.json
          responses:
            200:
              body:
                application/json:
                  schema: !include schema_cart_slice_options_GET.json
                  example: !include example_cart_slice_options_GET.json
      /submit:
        is: [ localized ]
        post:
          description: |
            **SERVER SIDE ONLY.** 
            This method should be called only from server side with rollback functionality. API consumer MUST call `/cart/submit` for automatic slices submit. Cart slice submit creates order for submited slice. 
            
            **SERVER SIDE IMPLEMENTATION NOTE:**
            In server side returned order could be not stored in database and only if all slices submit succeeds, `/cart/submit` implementation stores all orders in database. This way rollback implementation is straightforward, because `/cart/submit` initializes orders storing.
          responses:
            201:
              body:
                application/json:
                  schema: !include schema_order.json
                  example: !include example_order.json
